@mixin neuMorphismShadow($positive: 4px 4px 8px #111315, $negative: -4px -4px 8px #3339) {
  box-shadow: $positive, $negative;
}
@mixin neuMorphGradient($colors: ('first': $dark-purple, 'second': $dark-purple), $dir: null) {
  background: linear-gradient(135deg, map-get($colors, 'first') 0%, map-get($colors, 'second') 100%);
}


@mixin transition($transition-property, $transition-time, $easing) {
  -webkit-transition: $transition-property $transition-time $easing;
  -moz-transition: $transition-property $transition-time $easing;
  -ms-transition: $transition-property $transition-time $easing;
  -o-transition: $transition-property $transition-time $easing;
  transition: $transition-property $transition-time $easing;
}

// Ensure CSS grid works with IE 11 spec.
// https://css-tricks.com/browser-compatibility-css-grid-layouts-simple-sass-mixins/
// sass-lint:disable no-vendor-prefixes, no-duplicate-properties
@mixin display-grid {
  display: -ms-grid;
  display: grid;
}

// $columns values should be delimited by a space
@mixin grid-template-columns($columns...) {
  -ms-grid-columns: $columns;
  grid-template-columns: $columns;
}

// $rows values should be delimited by a space
@mixin grid-template-rows($rows...) {
  -ms-grid-rows: $rows;
  grid-template-rows: $rows;
}

// Can be used in combination with above grid-template-X mixins.
// These result in the same output:
// @include grid-template-columns(10px grid-repeat(4, 20px) 30px);
// @include grid-template-columns(10px 20px 20px 20px 20px 30px);
@function grid-repeat($repeat, $stuff: 1fr) {
  $list: ();
  @for $i from 1 through $repeat {
    $list: append($list, $stuff, space);
  }
  @return $list;
}

@mixin grid-column($col-start, $col-end) {
  -ms-grid-column: $col-start;
  -ms-grid-column-span: $col-end - $col-start;
  grid-column: #{$col-start} / #{$col-end};
}

@mixin grid-row($row-start, $row-end) {
  -ms-grid-row: $row-start;
  -ms-grid-row-span: $row-end - $row-start;
  grid-row: #{$row-start} / #{$row-end};
}

@mixin grid-align-self($value) {
  -ms-grid-row-align: $value;
  align-self: $value;
}

@mixin grid-justify-self($value) {
  -ms-grid-column-align: $value;
  justify-self: $value;
}

$flexbox-grid-mixins-grid-type: skeleton !default;
$flexbox-grid-mixins-box-sizing: border-box !default;
$flexbox-grid-mixins-stack: margin-bottom !default;

@mixin grid($display: flex, $flex-direction: null, $flex-wrap: null, $flex-flow: null, $justify-content: null, $align-items: null, $align-content: null, $gutter: null)
{
	@if $flexbox-grid-mixins-box-sizing == 'border-box' or $flexbox-grid-mixins-box-sizing == 'content-box' {
		box-sizing: $flexbox-grid-mixins-box-sizing;
	}

	@if $display {
		display: $display;
	}

	@if $flex-direction {
		flex-direction: $flex-direction;
	}
	@if $flex-wrap {
		flex-wrap: $flex-wrap;
	}

	@if $flex-flow {
		flex-flow: $flex-flow;
	}

	@if $justify-content {
		justify-content: $justify-content;
	}
	@if $align-items {
		align-items: $align-items;
	}
	@if $align-content {
		align-content: $align-content;
	}

	@if $flexbox-grid-mixins-grid-type == skeleton {
		@if $gutter {
			margin-left: $gutter / 2 * -1;
			margin-right: $gutter / 2 * -1;
		}
	}

	@content;
}

@mixin grid-col($col: null, $grid-columns: 12, $col-offset: null, $gutter: null, $align-self: null, $flex-grow: 0, $flex-shrink: 1, $flex-basis: auto, $order: null, $shorthand: true, $last-child: false, $width: null, $max-width: null, $min-width: null, $height: null, $max-height: null, $min-height: null)
{
	@if $flexbox-grid-mixins-box-sizing == 'border-box' or $flexbox-grid-mixins-box-sizing == 'content-box' {
		box-sizing: $flexbox-grid-mixins-box-sizing;
	}

	@if type-of($col) == number and unitless($col) == true {
		$flex-shrink: 0;
		$flex-basis: percentage($col / $grid-columns);

		@if $flexbox-grid-mixins-grid-type == skeleton {
			@if $gutter and unit($gutter) == '%' {
				$flex-basis: $flex-basis - $gutter;
			} @else if $gutter and unitless($gutter) == false {
				$flex-basis: calc( #{$flex-basis} - #{$gutter});
			}

		} @else if $flexbox-grid-mixins-grid-type == margin-offset {
			@if $gutter and unit($gutter) == '%' {
				$flex-basis: (100% - ($gutter * ($grid-columns / $col - 1))) / ($grid-columns / $col);
			} @else if $gutter and unitless($gutter) == false {
				$flex-basis: calc( #{$flex-basis} - #{$gutter * ($grid-columns / $col - 1) / ($grid-columns / $col)});
			}
		}

		@if $col-offset and unit($col-offset) == '%' {
			$flex-basis: $flex-basis + $col-offset;
		} @else if $col-offset and unitless($col-offset) == false {
			$flex-basis: calc( #{$flex-basis} + #{$col-offset});
		}
	} @else if type-of($col) == number and unitless($col) == false {
		$flex-grow: 0;
		$flex-shrink: 0;
		$flex-basis: $col;
	} @else if type-of($col) == string and $col == 'auto' {
		// flex: auto;
		$flex-grow: 1;
		$flex-shrink: 1;
		$flex-basis: auto;
	} @else if type-of($col) == string and $col == 'equal' {
		// flex: 1;
		$flex-grow: 1;
		$flex-shrink: 1;
		$flex-basis: 0;
	} @else if type-of($col) == string and $col == 'none' {
		// flex: none;
		$flex-grow: 0;
		$flex-shrink: 0;
		$flex-basis: auto;
	} @else if type-of($col) == string and $col == 'initial' {
		// flex: initial;
		$flex-grow: 0;
		$flex-shrink: 1;
		$flex-basis: auto;
	} @else if type-of($col) == string and $col == 'positive' {
		// positive number
		@if $flex-grow == 0 {
			$flex-grow: 1;
		}
		$flex-shrink: 0;
		$flex-basis: 0;
	}

	@if type-of($shorthand) == bool and $shorthand == true {
		flex: $flex-grow $flex-shrink $flex-basis;
	} @else {
		flex-basis: $flex-basis;
		flex-grow: $flex-grow;
		flex-shrink: $flex-shrink;
	}

	@if $align-self != null {
		align-self: $align-self;
	}

	@if type-of($order) == number {
		order: $order;
	}

	@if type-of($width) == bool and $width == true {
		width: $flex-basis;
	} @else if type-of($width) == number and unitless($width) == false {
		width: $width;
	} @else if type-of($width) == string and $width == 'auto' {
		width: auto;
	}

	@if type-of($max-width) == bool and $max-width == true {
		max-width: $flex-basis;
	} @else if type-of($max-width) == number and unitless($max-width) == false {
		max-width: $max-width;
	} @else if type-of($max-width) == string and $max-width == 'auto' {
		max-width: auto;
	}

	@if type-of($min-width) == bool and $min-width == true {
		min-width: $flex-basis;
	} @else if type-of($min-width) == number and unitless($min-width) == false {
		min-width: $min-width;
	} @else if type-of($min-width) == string and $min-width == 'auto' {
		min-width: auto;
	}

	@if $height != null {
		height: $height;
	}
	@if $max-height != null {
		max-height: $max-height;
	}
	@if $min-height != null {
		min-height: $min-height;
	}

	@if $gutter and unitless($gutter) == false {
		@if $flexbox-grid-mixins-grid-type == skeleton {
			margin-left: $gutter / 2;
			margin-right: $gutter / 2;
		} @else if $flexbox-grid-mixins-grid-type == margin-offset {
			@if type-of($last-child) == bool and $last-child == true {
				margin-right: 0;
			} @else {
				margin-right: $gutter;
			}
		}

		@if $flexbox-grid-mixins-stack == margin-top {
			margin-top: $gutter;
		} @else if $flexbox-grid-mixins-stack == margin-bottom {
			margin-bottom: $gutter;
		} @else if $flexbox-grid-mixins-stack == margin-both {
			margin-top: $gutter / 2;
			margin-bottom: $gutter / 2;
		}
	}

	@content;
}